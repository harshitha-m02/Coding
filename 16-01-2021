
4. https://leetcode.com/problems/number-of-islands/

class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        count = 0
        row= len(grid)
        col = len(grid[0])
        for i in range(0,row):
            for j in range(0,col):
                if grid[i][j] =="1":
                    count += 1        
                    self.dfs(i,j,grid)
        return count
    
    def dfs(self,i,j,grid):
        if i < 0 or i >= len(grid) or j<0 or j >= len(grid[0]) or grid[i][j] == "0":
            return
        grid[i][j]  = "0"    
                                                      
        self.dfs(i+1,j,grid)
        self.dfs(i-1,j,grid)                                               
                                                      
        self.dfs(i,j-1,grid)
        self.dfs(i,j+1,grid)
        
8. https://leetcode.com/problems/rotting-oranges/

class Solution:
    def orangesRotting(self, grid: List[List[int]]) -> int:
        rows, cols = len(grid), len(grid[0])
        q, fresh = deque(), 0
        for r in range(rows):
            for c in range(cols):
                if grid[r][c] == 1:
                    fresh += 1
                if grid[r][c] == 2:
                    q.append((r,c))
        if not fresh:
            return 0

        days, rot = 0, 0
        while q:
            for _ in range(len(q)):
                r, c = q.popleft()
                for dr,dc in [(0,-1),(-1,0),(0,1),(1,0)]:
                    if (0 <= r+dr < rows) and (0 <= c+dc < cols):
                        if grid[r+dr][c+dc] == 1:
                            rot += 1
                            grid[r+dr][c+dc] = 2
                            q.append((r+dr,c+dc))
            days += 1

        if fresh > rot: 
            return -1
        return days-1
